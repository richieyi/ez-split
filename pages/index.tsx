import type { NextPage } from 'next';
import {
  TrashIcon,
  PencilIcon,
  PlusCircleIcon,
  CheckIcon,
} from '@heroicons/react/solid';
import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Button from '../components/Button';
import Input from '../components/Input';
import styles from '../styles/Home.module.css';

const item1 = {
  name: 'hot dog',
  price: 1.5,
};
const item2 = {
  name: 'waffle',
  price: 2.33,
};

interface Item {
  name: string;
  price: number;
}

interface People {
  name: string;
  // percentage: number;
}

/*
TODO:
- Names of people
- Split type (evenly/percentage)
- Display sub total
*/

const Home: NextPage = () => {
  const [newItemName, setNewItemName] = useState<string>('');
  const [newPrice, setNewPrice] = useState<string>('');
  const [hasError, setHasError] = useState<boolean>(false);
  const [isAddingNewItem, setIsAddingNewItem] =
    useState<boolean>(false);
  const [items, setItems] = useState<Item[]>([item1, item2]);

  const [newPerson, setNewPerson] = useState<string>('');
  const [isAddingNewPerson, setIsAddingNewPerson] =
    useState<boolean>(false);
  const [people, setPeople] = useState<People[]>([]);

  function renderItems() {
    return items.map((item, idx) => (
      <div key={idx} className="flex">
        <div>{`${item.name} - $${item.price}`}</div>
        <PencilIcon className="h-5 w-5" />
        <TrashIcon className="h-5 w-5" />
      </div>
    ));
  }

  function handleAddNewItem() {
    setIsAddingNewItem(true);
  }

  function handleSave() {
    if (newItemName.length > 0 && newPrice.length > 0) {
      setItems([
        ...items,
        { name: newItemName, price: Number(newPrice) },
      ]);
      setIsAddingNewItem(false);
      setHasError(false);
    } else {
      setHasError(true);
    }
  }

  function handleCancel() {
    setIsAddingNewItem(false);
  }

  function handleNameChange(e) {
    setNewItemName(e.target.value);
  }

  function handlePriceChange(e) {
    setNewPrice(e.target.value);
  }

  function displayTotal() {
    return items.reduce(
      (prevVal, currVal) => prevVal + currVal.price,
      0
    );
  }

  function handlePersonNameChange(e) {
    setNewPerson(e.target.value);
  }

  function handleAddNewPerson() {
    setIsAddingNewPerson(true);
  }

  function handleSavePerson() {
    setPeople([...people, { name: newPerson }]);
    setIsAddingNewPerson(false);
  }

  function handleCancelPerson() {
    setNewPerson('');
    setIsAddingNewPerson(false);
  }

  function displayPeople() {
    return people.map((person, idx) => (
      <div key={idx}>{person.name}</div>
    ));
  }

  console.log('here', people);

  return (
    <div>
      <Head>
        <title>EZ Split</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="justify-center w-1/2">
        <div className="flex-col justify-start">
          <div>
            {isAddingNewItem ? (
              <form>
                {/* <label htmlFor="first">Item</label> */}
                <input
                  type="text"
                  name="item"
                  className="border-2 border-black rounded-full p-2"
                  placeholder="Ex: Pizza"
                  onChange={handleNameChange}
                />
                {/* <label htmlFor="second">Price</label> */}
                <input
                  type="text"
                  name="price"
                  className="border-2 border-black rounded-full p-2"
                  placeholder="Ex: $10.00"
                  onChange={handlePriceChange}
                />
              </form>
            ) : null}
            <div className="flex">
              {isAddingNewItem ? (
                <button
                  type="button"
                  className="border-2 border-black rounded-full p-2"
                  onClick={handleSave}
                >
                  <CheckIcon className="h-5 w-5" />
                </button>
              ) : null}
              {isAddingNewItem ? (
                <button
                  type="button"
                  className="border-2 border-black rounded-full p-2"
                  onClick={handleCancel}
                >
                  <TrashIcon className="h-5 w-5" />
                </button>
              ) : null}
              {isAddingNewItem && hasError ? (
                <span>Error! Enter item and price.</span>
              ) : null}
            </div>
            <div className="flex justify-between">
              <h1 className="font-bold">Items</h1>
              {!isAddingNewItem ? (
                <button
                  type="button"
                  // className="border-2 border-black rounded-full p-2"
                  onClick={handleAddNewItem}
                >
                  <PlusCircleIcon className="h-5 w-5" />
                </button>
              ) : null}
            </div>
            {renderItems()}
            {`Total: $${displayTotal()}`}
          </div>
          <div>
            {isAddingNewPerson ? (
              <form>
                {/* <label htmlFor="name">Name</label> */}
                <input
                  type="text"
                  name="name"
                  className="border-2 border-black rounded-full p-2"
                  placeholder="Ex: John"
                  onChange={handlePersonNameChange}
                />
              </form>
            ) : null}
            <div className="flex">
              {isAddingNewPerson ? (
                <button
                  type="button"
                  className="border-2 border-black rounded-full p-2"
                  onClick={handleSavePerson}
                >
                  <CheckIcon className="h-5 w-5" />
                </button>
              ) : null}
              {isAddingNewPerson ? (
                <button
                  type="button"
                  className="border-2 border-black rounded-full p-2"
                  onClick={handleCancelPerson}
                >
                  <TrashIcon className="h-5 w-5" />
                </button>
              ) : null}
            </div>
            <div className="flex justify-between">
              <h1 className="font-bold">People</h1>
              {!isAddingNewPerson ? (
                <button
                  type="button"
                  // className="border-2 border-black rounded-full p-2"
                  onClick={handleAddNewPerson}
                >
                  <PlusCircleIcon className="h-5 w-5" />
                </button>
              ) : null}
            </div>
            <div>{displayPeople()}</div>
          </div>
        </div>
      </main>

      <footer>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span>
            <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              width={72}
              height={16}
            />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
