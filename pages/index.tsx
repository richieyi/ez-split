import type { NextPage } from 'next'
import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Button from '../components/Button';
import Input from '../components/Input';
import styles from '../styles/Home.module.css';

const item1 = {
  name: 'hot dog',
  price: 1.5,
};
const item2 = {
  name: 'waffle',
  price: 2.33,
};

interface Item {
  name: string;
  price: number;
}

const Home: NextPage = () => {
  const [newName, setNewName] = useState<string>('');
  const [newPrice, setNewPrice] = useState<string>('');
  const [isAddingNew, setIsAddingNew] = useState<boolean>(false);
  const [items, setItems] = useState<Item[]>([item1, item2]);

  function renderItems() {
    return items.map((item, idx) => (
      <div key={idx}>{`${item.name} - $${item.price}`}</div>
    ));
  }

  function handleAddNewItem() {
    setIsAddingNew(!isAddingNew);
  }

  function handleSave() {
    setItems([...items, { name: newName, price: Number(newPrice) }]);
    setIsAddingNew(!isAddingNew);
  }

  function handleNameChange(e) {
    setNewName(e.target.value);
  }

  function handlePriceChange(e) {
    setNewPrice(e.target.value);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>EZ Split</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className="flex">
          {!isAddingNew ? (
            <button
              type="button"
              className="border-2 border-black rounded-full p-2"
              onClick={handleAddNewItem}
            >
              Add Item
            </button>
          ) : null}
          {isAddingNew ? (
            <button
              type="button"
              className="border-2 border-black rounded-full p-2"
              onClick={handleSave}
            >
              Save
            </button>
          ) : null}
        </div>
        {isAddingNew ? (
          <form>
            <label htmlFor="first">Item</label>
            <input
              type="text"
              name="first"
              className="border-2 border-black rounded-full p-2"
              onChange={handleNameChange}
            />
            <label htmlFor="second">Price</label>
            <input
              type="text"
              name="second"
              className="border-2 border-black rounded-full p-2"
              onChange={handlePriceChange}
            />
          </form>
        ) : null}
        {renderItems()}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              width={72}
              height={16}
            />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home
